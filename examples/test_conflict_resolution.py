"""
Test para verificar la resoluci√≥n del conflicto previa -> carrera
Verifica que cuando se inicia una carrera durante una previa activa:
1. La previa se termina autom√°ticamente
2. La carrera se inicia correctamente
3. No hay errores en el proceso
"""

import time
import requests
import json

def test_conflict_resolution():
    """Test para verificar la resoluci√≥n correcta del conflicto"""
    
    print("üß™ Test: Resoluci√≥n de Conflicto Previa -> Carrera")
    print("=" * 60)
    
    # URL base del servidor
    base_url = "http://192.168.1.100:8080"
    
    try:
        # Paso 1: Verificar estado inicial
        print("1Ô∏è‚É£ Verificando estado inicial...")
        response = requests.get(f"{base_url}/api/traffic-light/status", timeout=5)
        initial_status = response.json()
        print(f"   Estado inicial: {initial_status['traffic_light_status']['state']}")
        
        # Paso 2: Iniciar previa
        print("2Ô∏è‚É£ Iniciando previa...")
        response = requests.get(f"{base_url}/api/traffic-light/previous", timeout=5)
        previous_result = response.json()
        
        if not previous_result['success']:
            print(f"   ‚ùå Error iniciando previa: {previous_result['message']}")
            return False
        
        print("   ‚úÖ Previa iniciada correctamente")
        print(f"   Estado: {previous_result['traffic_light_status']['state']}")
        
        # Esperar un momento para que la previa est√© activa
        time.sleep(1)
        
        # Paso 3: Verificar que la previa est√° activa
        print("3Ô∏è‚É£ Verificando que previa est√° activa...")
        response = requests.get(f"{base_url}/api/traffic-light/status", timeout=5)
        status_during_previous = response.json()
        
        if status_during_previous['traffic_light_status']['state'] != 'blinking':
            print(f"   ‚ö†Ô∏è Estado inesperado durante previa: {status_during_previous['traffic_light_status']['state']}")
            return False
        
        print("   ‚úÖ Previa est√° activa (blinking)")
        
        # Paso 4: Iniciar carrera durante previa (CONFLICTO)
        print("4Ô∏è‚É£ Iniciando carrera durante previa (conflicto)...")
        response = requests.get(f"{base_url}/api/traffic-light/start", timeout=5)
        race_result = response.json()
        
        if not race_result['success']:
            print(f"   ‚ùå Error iniciando carrera: {race_result['message']}")
            return False
        
        print("   ‚úÖ Carrera iniciada correctamente")
        print(f"   Estado del sem√°foro: {race_result['traffic_light_status']['state']}")
        print(f"   Estado de la carrera: {race_result['race_status']['is_race_started']}")
        
        # Paso 5: Verificar que la previa se termin√≥ autom√°ticamente
        print("5Ô∏è‚É£ Verificando que previa se termin√≥ autom√°ticamente...")
        response = requests.get(f"{base_url}/api/traffic-light/status", timeout=5)
        status_after_race = response.json()
        
        if status_after_race['traffic_light_status']['state'] == 'blinking':
            print("   ‚ùå Previa sigue activa despu√©s de iniciar carrera")
            return False
        
        print("   ‚úÖ Previa se termin√≥ autom√°ticamente")
        
        # Paso 6: Esperar a que termine la secuencia de largada
        print("6Ô∏è‚É£ Esperando fin de secuencia de largada...")
        time.sleep(5)
        
        # Paso 7: Verificar estado final
        print("7Ô∏è‚É£ Verificando estado final...")
        response = requests.get(f"{base_url}/api/traffic-light/status", timeout=5)
        final_status = response.json()
        
        print(f"   Estado final del sem√°foro: {final_status['traffic_light_status']['state']}")
        print(f"   Estado final de la carrera: {final_status['race_status']['is_race_started']}")
        
        # Paso 8: Parar la carrera para limpiar
        print("8Ô∏è‚É£ Parando carrera para limpiar...")
        response = requests.get(f"{base_url}/api/traffic-light/stop", timeout=5)
        stop_result = response.json()
        
        if stop_result['success']:
            print("   ‚úÖ Carrera parada correctamente")
        else:
            print(f"   ‚ö†Ô∏è Error parando carrera: {stop_result['message']}")
        
        print("\n" + "=" * 60)
        print("‚úÖ Test de resoluci√≥n de conflicto completado exitosamente")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_multiple_conflicts():
    """Test para verificar m√∫ltiples conflictos consecutivos"""
    
    print("\nüß™ Test: M√∫ltiples Conflictos Consecutivos")
    print("=" * 60)
    
    base_url = "http://192.168.1.100:8080"
    
    try:
        for i in range(3):
            print(f"\n--- Iteraci√≥n {i+1}/3 ---")
            
            # Iniciar previa
            print(f"   Iniciando previa {i+1}...")
            response = requests.get(f"{base_url}/api/traffic-light/previous", timeout=5)
            if not response.json()['success']:
                print(f"   ‚ùå Error en previa {i+1}")
                return False
            
            time.sleep(0.5)
            
            # Iniciar carrera durante previa
            print(f"   Iniciando carrera {i+1} durante previa...")
            response = requests.get(f"{base_url}/api/traffic-light/start", timeout=5)
            if not response.json()['success']:
                print(f"   ‚ùå Error en carrera {i+1}")
                return False
            
            time.sleep(2)
            
            # Parar carrera
            print(f"   Parando carrera {i+1}...")
            requests.get(f"{base_url}/api/traffic-light/stop", timeout=5)
            
            time.sleep(1)
        
        print("\n‚úÖ Test de m√∫ltiples conflictos completado exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de m√∫ltiples conflictos: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando tests de resoluci√≥n de conflictos")
    print("=" * 60)
    
    # Test 1: Resoluci√≥n de conflicto b√°sico
    success1 = test_conflict_resolution()
    
    # Test 2: M√∫ltiples conflictos consecutivos
    success2 = test_multiple_conflicts()
    
    print("\n" + "=" * 60)
    if success1 and success2:
        print("‚úÖ Todos los tests de resoluci√≥n de conflictos pasaron")
        print("   El sistema maneja correctamente el escenario previa -> carrera")
    else:
        print("‚ùå Algunos tests fallaron")
        print("   Revisar logs para identificar el problema espec√≠fico") 