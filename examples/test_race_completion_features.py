"""
Test de Funcionalidades de Fin de Carrera y Sincronizaci√≥n
Verifica el fin de carrera autom√°tico, sincronizaci√≥n realtime y manejo de previa
"""

import time
import json
from src.race_controller import RaceController
from src.web_server import WebServer
from src.config import *

def test_race_completion_automatic():
    """Test de fin de carrera autom√°tico"""
    print("üèÅ Test de Fin de Carrera Autom√°tico")
    print("=" * 50)
    
    race_controller = RaceController(max_laps=3)
    web_server = WebServer("127.0.0.1", 8080, race_controller)
    
    print("üéØ Verificando fin de carrera autom√°tico...")
    
    # Simular carrera hasta completar
    print("\n--- Simulando carrera ---")
    
    # Incrementar vueltas hasta completar
    for i in range(3):
        print(f"   Vuelta {i+1}/3")
        race_controller.increment_lap_immediate()
        
        # Verificar estado
        status = race_controller.get_race_status()
        print(f"      Vueltas: {status['current_laps']}")
        print(f"      Completada: {status['is_completed']}")
        print(f"      Carrera iniciada: {status['is_race_started']}")
        
        time.sleep(0.1)
    
    # Verificar que la carrera se complet√≥ autom√°ticamente
    print("\n--- Verificando fin autom√°tico ---")
    
    # Esperar a que termine la animaci√≥n y el fin autom√°tico
    time.sleep(2)
    
    final_status = race_controller.get_race_status()
    print(f"   Estado final:")
    print(f"      Vueltas: {final_status['current_laps']}")
    print(f"      Completada: {final_status['is_completed']}")
    print(f"      Carrera iniciada: {final_status['is_race_started']}")
    
    # Verificar que se resete√≥ autom√°ticamente
    if final_status['current_laps'] == 0 and not final_status['is_completed']:
        print("   ‚úÖ Fin de carrera autom√°tico correcto")
    else:
        print("   ‚ùå Error en fin de carrera autom√°tico")
    
    race_controller.cleanup()

def test_previa_automatic_finish():
    """Test de fin autom√°tico de previa al iniciar carrera"""
    print("\n‚ö†Ô∏è Test de Fin Autom√°tico de Previa")
    print("=" * 50)
    
    race_controller = RaceController(max_laps=5)
    web_server = WebServer("127.0.0.1", 8080, race_controller)
    
    print("üîÑ Verificando fin autom√°tico de previa...")
    
    # 1. Iniciar previa
    print("\n--- Paso 1: Iniciar Previa ---")
    race_controller.race_previous()
    
    traffic_status = race_controller.get_traffic_light_status()
    print(f"   Estado del sem√°foro: {traffic_status['state']}")
    print(f"   Titileando: {traffic_status['blinking_active']}")
    
    if traffic_status['state'] == 'blinking':
        print("   ‚úÖ Previa iniciada correctamente")
    else:
        print("   ‚ùå Error al iniciar previa")
    
    # 2. Iniciar carrera (debe terminar previa autom√°ticamente)
    print("\n--- Paso 2: Iniciar Carrera ---")
    race_controller.start_race()
    
    traffic_status = race_controller.get_traffic_light_status()
    race_status = race_controller.get_race_status()
    
    print(f"   Estado del sem√°foro: {traffic_status['state']}")
    print(f"   Titileando: {traffic_status['blinking_active']}")
    print(f"   Carrera iniciada: {race_status['is_race_started']}")
    
    # Verificar que la previa se termin√≥ autom√°ticamente
    if traffic_status['state'] != 'blinking' and race_status['is_race_started']:
        print("   ‚úÖ Previa terminada autom√°ticamente")
    else:
        print("   ‚ùå Error en fin autom√°tico de previa")
    
    race_controller.cleanup()

def test_realtime_sync_improved():
    """Test de sincronizaci√≥n realtime mejorada"""
    print("\n‚ö° Test de Sincronizaci√≥n Realtime Mejorada")
    print("=" * 50)
    
    race_controller = RaceController(max_laps=5)
    web_server = WebServer("127.0.0.1", 8080, race_controller)
    
    print("üîÑ Verificando sincronizaci√≥n realtime...")
    
    # Simular m√∫ltiples incrementos r√°pidos
    print("\n--- Simulando incrementos r√°pidos ---")
    
    sync_times = []
    for i in range(5):
        start_time = time.time()
        
        # Incrementar vuelta
        race_controller.increment_lap_immediate()
        
        # Obtener estado inmediatamente
        status = race_controller.get_race_status()
        
        sync_time = (time.time() - start_time) * 1000  # Convertir a ms
        sync_times.append(sync_time)
        
        print(f"   Incremento {i+1}: {status['current_laps']} vueltas - {sync_time:.2f}ms")
        
        time.sleep(0.05)  # 50ms entre incrementos
    
    # Calcular estad√≠sticas de sincronizaci√≥n
    avg_sync = sum(sync_times) / len(sync_times)
    max_sync = max(sync_times)
    min_sync = min(sync_times)
    
    print(f"\n   üìä Estad√≠sticas de sincronizaci√≥n:")
    print(f"      Promedio: {avg_sync:.2f}ms")
    print(f"      M√°ximo: {max_sync:.2f}ms")
    print(f"      M√≠nimo: {min_sync:.2f}ms")
    
    # Verificar que la sincronizaci√≥n es r√°pida
    if avg_sync < 50:
        print("   ‚úÖ Sincronizaci√≥n ultra-r√°pida confirmada")
    else:
        print(f"   ‚ö†Ô∏è Sincronizaci√≥n lenta: {avg_sync:.2f}ms promedio")
    
    race_controller.cleanup()

def test_traffic_light_race_state():
    """Test del estado de carrera en el sem√°foro"""
    print("\nüö¶ Test de Estado de Carrera en Sem√°foro")
    print("=" * 50)
    
    race_controller = RaceController(max_laps=3)
    web_server = WebServer("127.0.0.1", 8080, race_controller)
    
    print("üìä Verificando estado de carrera en sem√°foro...")
    
    # Test 1: Carrera no iniciada
    print("\n--- Test 1: Carrera No Iniciada ---")
    race_controller.is_race_started = False
    
    traffic_status = race_controller.get_traffic_light_status()
    race_status = race_controller.get_race_status()
    
    print(f"   Estado del sem√°foro: {traffic_status['state']}")
    print(f"   Carrera iniciada: {race_status['is_race_started']}")
    
    if not race_status['is_race_started']:
        print("   ‚úÖ Estado correcto")
    else:
        print("   ‚ùå Error en estado")
    
    # Test 2: Carrera iniciada
    print("\n--- Test 2: Carrera Iniciada ---")
    race_controller.start_race()
    
    traffic_status = race_controller.get_traffic_light_status()
    race_status = race_controller.get_race_status()
    
    print(f"   Estado del sem√°foro: {traffic_status['state']}")
    print(f"   Carrera iniciada: {race_status['is_race_started']}")
    
    if race_status['is_race_started']:
        print("   ‚úÖ Estado correcto")
    else:
        print("   ‚ùå Error en estado")
    
    # Test 3: Carrera completada
    print("\n--- Test 3: Carrera Completada ---")
    race_controller.current_laps = 3
    race_controller.complete_race()
    
    # Esperar a que termine el fin autom√°tico
    time.sleep(2)
    
    traffic_status = race_controller.get_traffic_light_status()
    race_status = race_controller.get_race_status()
    
    print(f"   Estado del sem√°foro: {traffic_status['state']}")
    print(f"   Carrera iniciada: {race_status['is_race_started']}")
    print(f"   Vueltas: {race_status['current_laps']}")
    
    if not race_status['is_race_started'] and race_status['current_laps'] == 0:
        print("   ‚úÖ Estado correcto despu√©s de completar")
    else:
        print("   ‚ùå Error en estado despu√©s de completar")
    
    race_controller.cleanup()

def test_web_sync_improvements():
    """Test de mejoras de sincronizaci√≥n web"""
    print("\nüåê Test de Mejoras de Sincronizaci√≥n Web")
    print("=" * 50)
    
    race_controller = RaceController(max_laps=5)
    web_server = WebServer("127.0.0.1", 8080, race_controller)
    
    print("üì± Verificando sincronizaci√≥n web...")
    
    # Simular actualizaciones web r√°pidas
    print("\n--- Simulando actualizaciones web ---")
    
    web_sync_times = []
    for i in range(3):
        start_time = time.time()
        
        # Simular incremento de vuelta
        race_controller.increment_lap_immediate()
        
        # Simular obtenci√≥n de estado web
        race_status = race_controller.get_race_status()
        traffic_status = race_controller.get_traffic_light_status()
        
        sync_time = (time.time() - start_time) * 1000
        web_sync_times.append(sync_time)
        
        print(f"   Actualizaci√≥n {i+1}: {race_status['current_laps']} vueltas - {sync_time:.2f}ms")
        
        time.sleep(0.1)
    
    # Calcular estad√≠sticas
    avg_web_sync = sum(web_sync_times) / len(web_sync_times)
    
    print(f"\n   üìä Sincronizaci√≥n web:")
    print(f"      Promedio: {avg_web_sync:.2f}ms")
    
    if avg_web_sync < 100:
        print("   ‚úÖ Sincronizaci√≥n web r√°pida")
    else:
        print(f"   ‚ö†Ô∏è Sincronizaci√≥n web lenta: {avg_web_sync:.2f}ms")
    
    race_controller.cleanup()

if __name__ == "__main__":
    print("üöÄ Iniciando Tests de Funcionalidades de Fin de Carrera")
    print("=" * 60)
    
    try:
        # Test 1: Fin de carrera autom√°tico
        test_race_completion_automatic()
        
        # Test 2: Fin autom√°tico de previa
        test_previa_automatic_finish()
        
        # Test 3: Sincronizaci√≥n realtime mejorada
        test_realtime_sync_improved()
        
        # Test 4: Estado de carrera en sem√°foro
        test_traffic_light_race_state()
        
        # Test 5: Mejoras de sincronizaci√≥n web
        test_web_sync_improvements()
        
        print("\nüéâ Todos los tests de funcionalidades de fin de carrera completados!")
        print("\nüìã Resumen de mejoras implementadas:")
        print("   ‚Ä¢ Fin de carrera autom√°tico con banderas")
        print("   ‚Ä¢ Terminaci√≥n autom√°tica de previa al iniciar carrera")
        print("   ‚Ä¢ Sincronizaci√≥n realtime mejorada (0.3 segundos)")
        print("   ‚Ä¢ Estado de carrera sincronizado en sem√°foro")
        print("   ‚Ä¢ Reset autom√°tico de vueltas al completar")
        
    except Exception as e:
        print(f"\n‚ùå Error en los tests: {e}")
        import traceback
        traceback.print_exc() 